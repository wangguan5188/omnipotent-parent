<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd   
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">         

	<!-- 
		配置事务管理器：声明式事务管理,采用AOP形式切入。
		声明事务控制的方面组件，该组件Spring预置了
		jdbc：org.springframework.jdbc.datasource.DataSourceTransactionManager
		hibernate：org.springframework.orm.hibernate3.HibernateTransactionManager
	-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 如果使用JDBC需要注入dataSource；如果使用Hibernate框架需要注入sessionFactory。 -->
 		<property name="dataSource" ref="dataSource"></property>
 	</bean>
	
	<!-- hibernate4配置 
	<bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	-->
	
	<!-- 注解方式配置事物 
	<tx:annotation-driven transaction-manager="transactionManager" /> 
	-->
	 
	<!-- 启用事务 -->
	<!--
		通常情况下，DML方法用propagation="REQUIRED"，表示开启事务。
		查询方法用read-only="true"，表示不支持事务，效率更高。
	-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager" >
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="load*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="search*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- AOP代理设置 -->
	<!-- 
		注意：proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
		 如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。 
		 如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用。 
	-->
	<aop:config proxy-target-class="true">
		<!-- 
			切入点表达式：
			1）匹配类的表达式
				用于指定哪些类的方法启用方面组件，语法格式within(类型)
				-匹配AddCostAction类中的所有方法  within(com.tarena.action.AddCostAction)
				-匹配com.tarena.action包下所有类的所有方法  within(com.tarena.action.*)
				-匹配com.tarena包及其子包下所有类的所有方法  within(com.tarena..*)
			2）匹配方法的表达式
				用于指定哪些类的哪些方法引用方面组件，语法格式execution(修饰符? 返回类型 方法名(参数列表) throws异常?)
				-匹配所有类中的delete方法  execution(* delete(..))
				-匹配JdbcCostDao中的delete方法  execution(* com.tarena.dao.JdbcCostDao.delete(..))
				-匹配JdbcCostDao中所有的方法  execution(* com.tarena.dao.JdbcCostDao.*(..))
				-匹配com.tarena.dao包下所有类的所有方法
					execution(* com.tarena.dao.*.*(..))
				-匹配com.tarena包及其子包下所有类的所有方法
				execution(* com.tarena..*.*(..))
			3）匹配bean的表达式
				用于指定哪个bean启用方面组件，语法格式bean(id)
				-匹配id="costDao"的bean的所有方法  bean(costDao)
				-匹配所有后缀为Dao的bean的所有方法  bean(*Dao)
			4）匹配参数的表达式
				用于指定具有哪种参数的方法启用方面组件，语法格式args(参数)
				-匹配参数为String的所有方法  args(java.lang.String)
		-->
		<aop:advisor pointcut="execution(* com.omnipotent.service.*.*(..))" advice-ref="txAdvice" />
	</aop:config>
	
</beans>